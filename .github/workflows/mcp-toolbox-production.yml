# Build and push production Docker images for the mcp-toolbox package
name: MCP Toolbox Production Build

on:
  push:
    branches: [main]
    paths:
      - 'packages/mcp-toolbox/**'
      - 'packages/mcp/**'
      - 'packages/mcp-proxy/**'
      - '.github/workflows/mcp-toolbox-production.yml'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/mcp-toolbox

jobs:
  mcp-toolbox-production:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: mcp-toolbox.Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate deployment summary
        run: |
          echo "## üöÄ MCP Toolbox Docker Image Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Usage:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull the latest image" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Run the MCP Toolbox server" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 11990:11990 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e PROXY_ID=your-unique-proxy-id \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e MCP_SERVER_HOST=host.docker.internal:6050 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e PORT=11990 \\" >> $GITHUB_STEP_SUMMARY
          echo "  -e DB_PATH=/app/data/packages.db \\" >> $GITHUB_STEP_SUMMARY
          echo "  --add-host host.docker.internal:host-gateway \\" >> $GITHUB_STEP_SUMMARY
          echo "  -v \$(pwd)/data:/app/data \\" >> $GITHUB_STEP_SUMMARY
          echo "  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Update package description
        uses: actions/github-script@v7
        with:
          script: |
            const packageName = `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}`.toLowerCase();
            
            try {
              await github.rest.packages.updatePackageForOrg({
                package_type: 'container',
                package_name: packageName.split('/').pop(),
                org: context.repo.owner,
                description: 'MCP Toolbox - A lightweight, bundled WebSocket server for managing MCP (Model Context Protocol) packages with pure JavaScript SQLite persistence',
                homepage_url: `https://github.com/${context.repo.owner}/${context.repo.repo}`,
                public: true
              });
              console.log('‚úÖ Package description updated successfully');
            } catch (error) {
              console.log('‚ö†Ô∏è Could not update package description:', error.message);
            }

  security-scan:
    runs-on: ubuntu-latest
    needs: build-production
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif' 